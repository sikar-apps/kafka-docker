
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0 # Use a recent version
    hostname: zookeeper
    container_name: zookeeper
    ports:
    - "${ZOOKEEPER_PORT:-2181}:2181"
    volumes:
      - zookeeper-data:/var/lib/zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SESSION_TIMEOUT_MS: 20000
    healthcheck: # Add healthcheck for Zookeeper
      test: ["CMD-SHELL", "nc -z localhost 2181 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  kafka:
    image: confluentinc/cp-kafka:7.5.0 # Match Zookeeper version
    hostname: kafka
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy # Wait for Zookeeper healthcheck
    volumes:
      - kafka-data:/var/lib/kafka
    ports:
    - "${KAFKA_PORT:-9092}:9092" # Host port for external clients
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,LOCALHOST://kafka:${KAFKA_PORT:-9092}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,LOCALHOST://Rohits-MacBook-Air.local:${KAFKA_PORT:-9092}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT, LOCALHOST:PLAINTEXT # Map listener names to protocols
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT # Set inter-broker listener
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_NUM_PARTITIONS: 1 # Set number of partitions
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1 # Set default replication factor
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true" # Enable auto topic creation

  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    platform: linux/amd64
    container_name: schema-registry
    depends_on:
      - kafka
    ports:
    - "${SCHEMA_REGISTRY_PORT:-8081}:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:29092
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_ADVERTISED_LISTENERS: http://schema-registry:8081
      SCHEMA_REGISTRY_DEBUG: "true"
      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_METHODS: GET,POST,PUT,OPTIONS
      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_ORIGIN: "*"

  schema-registry-ui:
    image: landoop/schema-registry-ui:latest
    platform: linux/amd64
    depends_on:
      - schema-registry
    container_name: schema-registry-ui
    ports:
      - "${SCHEMA_REGISTRY_UI_PORT:-8000}:8000"
    environment:
      SCHEMAREGISTRY_URL: http://localhost:${SCHEMA_REGISTRY_PORT:-8081}
      ALLOW_GLOBAL: 1
      ALLOW_TRANSITIVE: 1
      ALLOW_DELETION: 1

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    platform: linux/amd64
    container_name: kafdrop
    ports:
    - "${KAFDROP_PORT:-9100}:9100"
    environment:
      KAFKA_BROKERCONNECT: kafka:29092
      KAFKA_BROKER_CONNECT: kafka:29092
      server.port: 9100
      schema.registry.connect: http://schema-registry:8081
      schemaregistry.connect: http://schema-registry:8081
      JVM_OPTS: "-Xms32M -Xmx64M"
    depends_on:
      - kafka
      - schema-registry

  kafka-ui: # Optional: Kafka UI for monitoring
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    platform: linux/amd64
    ports:
      - 8080:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTER_0_SCHEMA_REGISTRY_URL: http://schema-registry:8081 # if schema registry in NOT visible on kafka-ui then manually add it on the UI by configuring the cluster.
      KAFKA_CLUSTER_0_SCHEMA_REGISTRY_ENABLED: 'true'
      KAFKA_CLUSTER_0_METRICS_PORT: 9997
      DYNAMIC_CONFIG_ENABLED: 'true'
      SCHEMA_REGISTRY_URL: http://schema-registry:8081
    depends_on:
      - kafka
      - schema-registry
volumes:
  zookeeper-data: {}
  kafka-data: {}